version: '3.8'

services:
  # Model Registry Service
  model-registry:
    build: ./services/model-registry
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://mlops:${POSTGRES_PASSWORD:-mlflow123}@postgres:5432/model_registry
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - mlops-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Experiment Tracking Service
  experiment-tracking:
    build: ./services/experiment-tracking
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://mlops:${POSTGRES_PASSWORD:-mlflow123}@postgres:5432/experiment_tracking
      - REDIS_URL=redis://redis:6379
      - MODEL_REGISTRY_URL=http://model-registry:8000
    depends_on:
      - postgres
      - redis
      - model-registry
    networks:
      - mlops-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Feature Store Service
  feature-store:
    build: ./services/feature-store
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://mlops:${POSTGRES_PASSWORD:-mlflow123}@postgres:5432/feature_store
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin123}
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - mlops-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pipeline Orchestrator Service
  pipeline-orchestrator:
    build: ./services/pipeline-orchestrator
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://mlops:${POSTGRES_PASSWORD:-mlflow123}@postgres:5432/pipeline_orchestrator
      - REDIS_URL=redis://redis:6379
      - MODEL_REGISTRY_URL=http://model-registry:8000
      - EXPERIMENT_TRACKING_URL=http://experiment-tracking:8003
      - FEATURE_STORE_URL=http://feature-store:8002
    depends_on:
      - postgres
      - redis
      - model-registry
      - experiment-tracking
      - feature-store
    networks:
      - mlops-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # A/B Testing Service
  ab-testing:
    build: ./services/ab-testing
    ports:
      - "8090:8090"
    environment:
      - DATABASE_URL=postgresql://mlops:${POSTGRES_PASSWORD:-mlflow123}@postgres:5432/ab_testing
      - REDIS_URL=redis://redis:6379
      - MODEL_REGISTRY_URL=http://model-registry:8000
      - PROMETHEUS_URL=http://prometheus:9090
    depends_on:
      - postgres
      - redis
      - model-registry
      - prometheus
    networks:
      - mlops-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Infrastructure Services
  postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=mlops
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mlflow123}
      - POSTGRES_DB=mlops_platform
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mlops-platform
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlops"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - mlops-platform
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    networks:
      - mlops-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infrastructure/docker/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mlops-platform
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - mlops-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./infrastructure/docker/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - mlops-platform
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  mlops-platform:
    driver: bridge
    name: mlops-platform-network
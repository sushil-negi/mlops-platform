name: MLOps Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: mlops-platform

jobs:
  # Code quality and security validation
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black==25.1.0 isort==6.0.1 flake8==7.0.0 mypy==1.8.0
        pip install bandit==1.7.5 safety==3.0.1 pytest==7.4.3
    
    - name: Code formatting check
      run: |
        python -m black --check --diff services/ infrastructure/ scripts/
    
    - name: Import sorting check
      run: |
        python -m isort --check-only --diff services/ infrastructure/ scripts/
    
    - name: Linting check
      run: |
        python -m flake8 services/ infrastructure/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 services/ infrastructure/ scripts/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type checking
      run: |
        python -m mypy services/ --ignore-missing-imports || true
    
    - name: Security scanning
      run: |
        python -m bandit -r services/ scripts/ --severity-level medium -f json || true
        python -m safety check --json || true

  # Service-specific unit tests
  service-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [model-registry, experiment-tracking, feature-store, pipeline-orchestrator, ab-testing]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install service dependencies
      run: |
        if [ -f services/${{ matrix.service }}/requirements.txt ]; then
          pip install -r services/${{ matrix.service }}/requirements.txt
        fi
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run service tests
      run: |
        cd services/${{ matrix.service }}
        if [ -d tests ]; then
          python -m pytest tests/ -v --cov=src --cov-report=xml
        else
          echo "No tests found for ${{ matrix.service }}"
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.service == 'model-registry'
      uses: codecov/codecov-action@v3
      with:
        file: services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}

  # Infrastructure validation
  infrastructure-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: mlops
          POSTGRES_PASSWORD: test123
          POSTGRES_DB: mlops_platform
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Test database migrations
      run: |
        PGPASSWORD=test123 psql -h localhost -U mlops -d mlops_platform -f infrastructure/postgres/init.sql
    
    - name: Test Redis connectivity
      run: |
        redis-cli -h localhost ping
    
    - name: Validate Prometheus configuration
      run: |
        docker run --rm -v $PWD/infrastructure/prometheus:/etc/prometheus prom/prometheus:latest promtool check config /etc/prometheus/prometheus.yml
    
    - name: Validate Grafana provisioning
      run: |
        find infrastructure/grafana/provisioning -name "*.yml" -exec echo "Checking {}" \; -exec cat {} \;

  # Integration tests with actual services
  integration-tests:
    runs-on: ubuntu-latest
    needs: [code-quality, service-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        POSTGRES_PASSWORD=test123
        MINIO_ROOT_PASSWORD=test123
        GRAFANA_ADMIN_PASSWORD=test123
        EOF
    
    - name: Start MLOps Platform services
      run: |
        docker compose -f docker-compose.platform.yml up -d
        sleep 60  # Wait for services to initialize
    
    - name: Wait for services to be healthy
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:8003/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:8002/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:8004/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:8090/health; do sleep 5; done'
    
    - name: Run integration tests
      run: |
        # Test Model Registry API
        curl -X POST http://localhost:8000/api/models \
          -H "Content-Type: application/json" \
          -d '{"name": "test-model", "version": "1.0.0", "framework": "test"}'
        
        # Test Experiment Tracking API
        curl -X POST http://localhost:8003/api/experiments \
          -H "Content-Type: application/json" \
          -d '{"name": "test-experiment", "description": "Integration test"}'
        
        # Test Feature Store API
        curl -X POST http://localhost:8002/api/feature-sets \
          -H "Content-Type: application/json" \
          -d '{"name": "test-features", "description": "Test feature set"}'
    
    - name: Check monitoring endpoints
      run: |
        curl -f http://localhost:9090/-/healthy  # Prometheus
        curl -f http://localhost:3000/api/health # Grafana
    
    - name: Collect service logs
      if: failure()
      run: |
        docker compose -f docker-compose.platform.yml logs > platform-logs.txt
    
    - name: Upload logs artifact
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: platform-logs
        path: platform-logs.txt

  # Security and compliance validation
  security-compliance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check for exposed secrets
      run: |
        # Check for hardcoded passwords or secrets
        if grep -r "password.*=" --include="*.yml" --include="*.yaml" . | grep -v "PASSWORD:-" | grep -v ".env.example"; then
          echo "Found hardcoded passwords!"
          exit 1
        fi
        echo "No hardcoded secrets found"
    
    - name: Validate environment variable usage
      run: |
        # Ensure all sensitive values use environment variables
        grep -r "POSTGRES_PASSWORD" docker-compose.platform.yml | grep -q "\${POSTGRES_PASSWORD"
        grep -r "MINIO_ROOT_PASSWORD" docker-compose.platform.yml | grep -q "\${MINIO_ROOT_PASSWORD"
        echo "Environment variable usage validated"

  # Build and push Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-compliance]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [model-registry, experiment-tracking, feature-store, pipeline-orchestrator, ab-testing]
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: services/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging environment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying MLOps Platform to staging environment"
        # Add actual deployment commands here
        # kubectl apply -f k8s/environments/staging/
    
    - name: Run staging smoke tests
      run: |
        echo "Running staging smoke tests"
        # Add staging validation tests here

  # Deploy to production environment
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying MLOps Platform to production environment"
        # Add actual deployment commands here
        # kubectl apply -f k8s/environments/production/
    
    - name: Run production smoke tests
      run: |
        echo "Running production smoke tests"
        # Add production validation tests here
    
    - name: Notify deployment success
      run: |
        echo "MLOps Platform deployed successfully to production"
        # Add notification logic (Slack, email, etc.)
# IMPORTANT: Secret management for PostgreSQL credentials
# This file previously contained hardcoded base64-encoded secrets which have been removed for security.
# 
# Please use external secret management solutions such as:
# - Kubernetes Secrets Store CSI Driver
# - HashiCorp Vault
# - AWS Secrets Manager
# - Azure Key Vault
# - Google Secret Manager
# - Sealed Secrets
#
# The deployment expects a Secret named 'postgres-secret' with the following keys:
# - username: PostgreSQL username
# - password: PostgreSQL password  
# - database: PostgreSQL database name
#
# Example using external-secrets operator:
# ---
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: postgres-secret
#   namespace: healthcare-ai-production
# spec:
#   secretStoreRef:
#     name: vault-backend
#     kind: SecretStore
#   target:
#     name: postgres-secret
#   data:
#   - secretKey: username
#     remoteRef:
#       key: production/postgres
#       property: username
#   - secretKey: password
#     remoteRef:
#       key: production/postgres
#       property: password
#   - secretKey: database
#     remoteRef:
#       key: production/postgres
#       property: database

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: healthcare-ai-production
data:
  POSTGRES_DB: mlflow_production
  POSTGRES_USER: mlflow

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: healthcare-ai-production
  labels:
    app: postgres
    environment: production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - postgres
            topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-type
                operator: In
                values:
                - production
      containers:
      - name: postgres
        image: postgres:14
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - mlflow
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - mlflow
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: healthcare-ai-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: healthcare-ai-production
  labels:
    app: postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres